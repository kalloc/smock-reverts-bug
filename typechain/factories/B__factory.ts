/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { B, BInterface } from "../B";

const _abi = [
  {
    inputs: [],
    name: "test",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f8a8fd6d14602d575b600080fd5b60336045565b60405190815260200160405180910390f35b60006001600080828254605791906064565b9091555050600054919050565b808201828112600083128015821682158216171560aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50509291505056fea2646970667358221220f345eab649a8313cea686a172d446e87e72cba5662af1892fd6657f1c3f59f1064736f6c63430008110033";

type BConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class B__factory extends ContractFactory {
  constructor(...args: BConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<B> {
    return super.deploy(overrides || {}) as Promise<B>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): B {
    return super.attach(address) as B;
  }
  override connect(signer: Signer): B__factory {
    return super.connect(signer) as B__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BInterface {
    return new utils.Interface(_abi) as BInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): B {
    return new Contract(address, _abi, signerOrProvider) as B;
  }
}
